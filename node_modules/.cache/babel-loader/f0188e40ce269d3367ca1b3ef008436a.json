{"ast":null,"code":"import isPlainObject from 'is-plain-obj';\nexport default function sortKeys(object) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isPlainObject(object) && !Array.isArray(object)) {\n    throw new TypeError('Expected a plain object or array');\n  }\n\n  const {\n    deep,\n    compare\n  } = options;\n  const seenInput = [];\n  const seenOutput = [];\n\n  const deepSortArray = array => {\n    const seenIndex = seenInput.indexOf(array);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    const result = [];\n    seenInput.push(array);\n    seenOutput.push(result);\n    result.push(...array.map(item => {\n      if (Array.isArray(item)) {\n        return deepSortArray(item);\n      }\n\n      if (isPlainObject(item)) {\n        return _sortKeys(item);\n      }\n\n      return item;\n    }));\n    return result;\n  };\n\n  const _sortKeys = object => {\n    const seenIndex = seenInput.indexOf(object);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    const result = {};\n    const keys = Object.keys(object).sort(compare);\n    seenInput.push(object);\n    seenOutput.push(result);\n\n    for (const key of keys) {\n      const value = object[key];\n      let newValue;\n\n      if (deep && Array.isArray(value)) {\n        newValue = deepSortArray(value);\n      } else {\n        newValue = deep && isPlainObject(value) ? _sortKeys(value) : value;\n      }\n\n      Object.defineProperty(result, key, { ...Object.getOwnPropertyDescriptor(object, key),\n        value: newValue\n      });\n    }\n\n    return result;\n  };\n\n  if (Array.isArray(object)) {\n    return deep ? deepSortArray(object) : object.slice();\n  }\n\n  return _sortKeys(object);\n}","map":{"version":3,"sources":["/Users/xin/Desktop/upload_to_ipfs/node_modules/sort-keys/index.js"],"names":["isPlainObject","sortKeys","object","options","Array","isArray","TypeError","deep","compare","seenInput","seenOutput","deepSortArray","array","seenIndex","indexOf","result","push","map","item","_sortKeys","keys","Object","sort","key","value","newValue","defineProperty","getOwnPropertyDescriptor","slice"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,cAA1B;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAAwC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACtD,MAAI,CAACH,aAAa,CAACE,MAAD,CAAd,IAA0B,CAACE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAA/B,EAAsD;AACrD,UAAM,IAAII,SAAJ,CAAc,kCAAd,CAAN;AACA;;AAED,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBL,OAAxB;AACA,QAAMM,SAAS,GAAG,EAAlB;AACA,QAAMC,UAAU,GAAG,EAAnB;;AAEA,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC9B,UAAMC,SAAS,GAAGJ,SAAS,CAACK,OAAV,CAAkBF,KAAlB,CAAlB;;AACA,QAAIC,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACrB,aAAOH,UAAU,CAACG,SAAD,CAAjB;AACA;;AAED,UAAME,MAAM,GAAG,EAAf;AACAN,IAAAA,SAAS,CAACO,IAAV,CAAeJ,KAAf;AACAF,IAAAA,UAAU,CAACM,IAAX,CAAgBD,MAAhB;AAEAA,IAAAA,MAAM,CAACC,IAAP,CAAY,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AAChC,UAAId,KAAK,CAACC,OAAN,CAAca,IAAd,CAAJ,EAAyB;AACxB,eAAOP,aAAa,CAACO,IAAD,CAApB;AACA;;AAED,UAAIlB,aAAa,CAACkB,IAAD,CAAjB,EAAyB;AACxB,eAAOC,SAAS,CAACD,IAAD,CAAhB;AACA;;AAED,aAAOA,IAAP;AACA,KAVc,CAAf;AAYA,WAAOH,MAAP;AACA,GAvBD;;AAyBA,QAAMI,SAAS,GAAGjB,MAAM,IAAI;AAC3B,UAAMW,SAAS,GAAGJ,SAAS,CAACK,OAAV,CAAkBZ,MAAlB,CAAlB;;AACA,QAAIW,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACrB,aAAOH,UAAU,CAACG,SAAD,CAAjB;AACA;;AAED,UAAME,MAAM,GAAG,EAAf;AACA,UAAMK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYlB,MAAZ,EAAoBoB,IAApB,CAAyBd,OAAzB,CAAb;AAEAC,IAAAA,SAAS,CAACO,IAAV,CAAed,MAAf;AACAQ,IAAAA,UAAU,CAACM,IAAX,CAAgBD,MAAhB;;AAEA,SAAK,MAAMQ,GAAX,IAAkBH,IAAlB,EAAwB;AACvB,YAAMI,KAAK,GAAGtB,MAAM,CAACqB,GAAD,CAApB;AACA,UAAIE,QAAJ;;AAEA,UAAIlB,IAAI,IAAIH,KAAK,CAACC,OAAN,CAAcmB,KAAd,CAAZ,EAAkC;AACjCC,QAAAA,QAAQ,GAAGd,aAAa,CAACa,KAAD,CAAxB;AACA,OAFD,MAEO;AACNC,QAAAA,QAAQ,GAAGlB,IAAI,IAAIP,aAAa,CAACwB,KAAD,CAArB,GAA+BL,SAAS,CAACK,KAAD,CAAxC,GAAkDA,KAA7D;AACA;;AAEDH,MAAAA,MAAM,CAACK,cAAP,CAAsBX,MAAtB,EAA8BQ,GAA9B,EAAmC,EAClC,GAAGF,MAAM,CAACM,wBAAP,CAAgCzB,MAAhC,EAAwCqB,GAAxC,CAD+B;AAElCC,QAAAA,KAAK,EAAEC;AAF2B,OAAnC;AAIA;;AAED,WAAOV,MAAP;AACA,GA7BD;;AA+BA,MAAIX,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AAC1B,WAAOK,IAAI,GAAGI,aAAa,CAACT,MAAD,CAAhB,GAA2BA,MAAM,CAAC0B,KAAP,EAAtC;AACA;;AAED,SAAOT,SAAS,CAACjB,MAAD,CAAhB;AACA","sourcesContent":["import isPlainObject from 'is-plain-obj';\n\nexport default function sortKeys(object, options = {}) {\n\tif (!isPlainObject(object) && !Array.isArray(object)) {\n\t\tthrow new TypeError('Expected a plain object or array');\n\t}\n\n\tconst {deep, compare} = options;\n\tconst seenInput = [];\n\tconst seenOutput = [];\n\n\tconst deepSortArray = array => {\n\t\tconst seenIndex = seenInput.indexOf(array);\n\t\tif (seenIndex !== -1) {\n\t\t\treturn seenOutput[seenIndex];\n\t\t}\n\n\t\tconst result = [];\n\t\tseenInput.push(array);\n\t\tseenOutput.push(result);\n\n\t\tresult.push(...array.map(item => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn deepSortArray(item);\n\t\t\t}\n\n\t\t\tif (isPlainObject(item)) {\n\t\t\t\treturn _sortKeys(item);\n\t\t\t}\n\n\t\t\treturn item;\n\t\t}));\n\n\t\treturn result;\n\t};\n\n\tconst _sortKeys = object => {\n\t\tconst seenIndex = seenInput.indexOf(object);\n\t\tif (seenIndex !== -1) {\n\t\t\treturn seenOutput[seenIndex];\n\t\t}\n\n\t\tconst result = {};\n\t\tconst keys = Object.keys(object).sort(compare);\n\n\t\tseenInput.push(object);\n\t\tseenOutput.push(result);\n\n\t\tfor (const key of keys) {\n\t\t\tconst value = object[key];\n\t\t\tlet newValue;\n\n\t\t\tif (deep && Array.isArray(value)) {\n\t\t\t\tnewValue = deepSortArray(value);\n\t\t\t} else {\n\t\t\t\tnewValue = deep && isPlainObject(value) ? _sortKeys(value) : value;\n\t\t\t}\n\n\t\t\tObject.defineProperty(result, key, {\n\t\t\t\t...Object.getOwnPropertyDescriptor(object, key),\n\t\t\t\tvalue: newValue\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tif (Array.isArray(object)) {\n\t\treturn deep ? deepSortArray(object) : object.slice();\n\t}\n\n\treturn _sortKeys(object);\n}\n"]},"metadata":{},"sourceType":"module"}